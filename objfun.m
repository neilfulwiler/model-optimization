function score = objfun (locomotionMAScmd, datafile, targetdata, varargin)
% Author: Neil Fulwiler
% Date  : 1.18.2013
% Usage: objfun is the objective function for determining
%      the success of a particular set of parameters at
%      approximating performance of a given data set. Performance
%      is dictated by the sum of the euclidean distances between
%      the location of the agent at identical timesteps.
%
% Parameters:
%    locomotionMAScmd   a string that can be passed directly to a 
%                       system command (the redefine arg will be
%                       appended before being invoked)
%
%    datafile           the path to the file that -will- holds 
%                       information generated by running locomotionMAS.
%                       
%    targetdata         the path to the data that the given parameters 
%                       will be tested against in order to check
%                       their success -OR- the data itself 
%
%    varargin           parameter-value pairs that will be used in the
%                       system and redefined by this function 
%                       (for the current list of model parameters (see
%                       utils/redefineParameter.m)
%
% Returns:
%    score              the 'fitness' of the parameter set
%                       given. As the score is the sum of the
%                       distance, smaller scores reflect better
%                       fits to the data
%
% !!ASSUMPTIONS!!
%   the target file contains data that 
%   was generated by running the identical initial
%   conditions either using different parameters,
%   or using human data
%

% the fields that we will be considering
fields={'x' 'y'};

% construct the command using redefineParameter which 
% does all that is necessary to shape the cmd that can
% be invoked using the new model parameters given
cmd         = [locomotionMAScmd ' ' redefineParameter(varargin{:})];

% run it
[status,msg]=system(cmd);
if (status)
    error('%s\n\n%s\n', 'locomotionMAS produced an error. Stopping simulations...', msg)
end

% collect the data from the files (will be an nx2 matrix with
% the columns representing each field in fields)
experimentdata = parseAgentData(datafile, [], fields{:});

% if the targetdata is a char array, it's assumed to be
% a path to the data which we will then import and process,
% otherwise it is assumed to contain the data itself
if ischar(targetdata)
    targetdata     = parseAgentData(targetdata, [], fields{:});
end

% compute the sum of the euclidean distance between each point
% described in the x,y space. First truncate the extra rows of
% which matrix is longer
minrows        = min([ size(targetdata,1), size(experimentdata,1) ]);
targetdata     = targetdata(1:minrows, :); 
experimentdata = experimentdata(1:minrows, :);
euclideandist  = sqrt(sum((targetdata - experimentdata).^2));
score          = sum(euclideandist);

end

